call plug#begin()
Plug 'catppuccin/nvim', {'as': 'catppuccin'}
Plug 'ggandor/lightspeed.nvim'
Plug 'glepnir/dashboard-nvim'
Plug 'itchyny/lightline.vim'
Plug 'romgrk/barbar.nvim'
Plug 'folke/which-key.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'folke/trouble.nvim'
Plug 'folke/lsp-colors.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'
Plug 'ms-jpq/chadtree'
Plug 'stevearc/vim-arduino'
Plug 'windwp/nvim-autopairs'
Plug 'sakhnik/nvim-gdb'
Plug 'mattn/emmet-vim'
Plug 'dcampos/cmp-emmet-vim'
Plug 'Jezda1337/nvim-html-css'
Plug 'https://github.com/wolandark/vim-live-server.git'
"Plug 'github/copilot.vim'
Plug 'jrop/mongo.nvim'
Plug 'mfussenegger/nvim-dap'
call plug#end()

colorscheme catppuccin
let g:lightline = { 'colorscheme': 'catppuccin', }
let g:dashboard_default_executive = 'telescope'

set completeopt=menu,menuone,noselect
set shiftwidth=4
set autoindent
set smartindent
set tabstop=4

nmap <silent>	<A-h> :BufferPrevious<CR>
nmap <silent>	<A-l> :BufferNext<CR>
nmap <silent>	<A-H> :BufferMovePrevious<CR>
nmap <silent>	<A-L> :BufferMoveNext<CR>
nmap <silent>	<A-c> :BufferClose<CR>
nmap <silent>	<C-t> :CHADopen<CR>
nmap <silent>	<C-f> :Telescope find_files<CR>
nmap <silent>	<C-g> :Telescope live_grep<CR>
nmap <silent>	<C-b> :Telescope buffers<CR>
nmap <silent>	<C-h> :Telescope help_tags<CR>
nmap <silent>	<A-n> :tabnew<CR>
nmap <silent>	bp    :lua require'dap'.toggle_breakpoint()<CR>
nmap <silent>	bc    :lua require'dap'.continue()<CR>
nmap <silent>	bsi   :lua require'dap'.step_over()<CR>
nmap <silent>	bso   :lua require'dap'.step_into()<CR>
nmap <silent>	bi    :lua require'dap'.repl.open()<CR>
set tabstop=4
set mouse=

:map <Up> <Nop>
:map <Left> <Nop>
:map <Right> <Nop>
:map <Down> <Nop>
:map b <Nop>
lua <<EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    mapping = {
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      ['<C-e>'] = cmp.mapping({
        i = cmp.mapping.abort(),
        c = cmp.mapping.close(),
      }),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
	  { name = 'emmet_vim' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it. 
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  local lspconfig = require('lspconfig')
  lspconfig.pyright.setup {
    capabilities = capabilities
  }
  lspconfig.quick_lint_js.setup {
    capabilities = capabilities
  }
  lspconfig.clangd.setup {
    capabilities = capabilities
  }
  lspconfig.cssmodules_ls.setup {
    capabilities = capabilities
  }
  lspconfig.csharp_ls.setup {
    capabilities = capabilities
  }
  lspconfig.gdscript.setup {
	capabilities = capabilities
  }

  -- Setup nvim-dap
  local dap = require('dap')
  dap.adapters.godot = {
	type = "server",
    host = '127.0.0.1',
    port = 6006,
  }
EOF
